using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows.Input;
using System.Xml.Serialization;

public class PatientViewModel : BaseViewModel
{
    public string PatientId { get; set; }
    public string PatientName { get; set; }  // Updated from Name to PatientName
    public DateTime? DOB { get; set; }
    public bool IsMale { get; set; }
    public bool IsFemale { get; set; }
    public string Place { get; set; }
    public DateTime? ScheduleDate { get; set; }

    public ObservableCollection<string> Places { get; set; }
    
    public ICommand RegisterCommand { get; }
    public ICommand BackupCommand { get; }

    private string dataPath = "Data/Patient Details";
    private string backupPath = "Data/History";

    public PatientViewModel()
    {
        Places = new ObservableCollection<string> { "Place1", "Place2", "Place3" };

        RegisterCommand = new RelayCommand(Register);
        BackupCommand = new RelayCommand(Backup);
    }

    private void Register()
    {
        if (!Directory.Exists(dataPath))
        {
            Directory.CreateDirectory(dataPath);
        }

        // Save the patient data as XML
        string sex = IsMale ? "Male" : "Female";
        Patient patient = new Patient
        {
            PatientId = PatientId,
            PatientName = PatientName,  // Updated from Name to PatientName
            DOB = DOB.Value,
            Sex = sex,
            Place = Place,
            ScheduleDate = ScheduleDate.Value
        };

        string filePath = Path.Combine(dataPath, $"{PatientId}_Details.xml");
        using (FileStream fs = new FileStream(filePath, FileMode.Create))
        {
            XmlSerializer serializer = new XmlSerializer(typeof(Patient));
            serializer.Serialize(fs, patient);
        }
    }

    private void Backup()
    {
        if (!Directory.Exists(backupPath))
        {
            Directory.CreateDirectory(backupPath);
        }

        // Move all files to the backup folder
        foreach (var file in Directory.GetFiles(dataPath))
        {
            string fileName = Path.GetFileName(file);
            string destFile = Path.Combine(backupPath, fileName);
            File.Move(file, destFile, true); // Overwrite if the file exists
        }
    }
}